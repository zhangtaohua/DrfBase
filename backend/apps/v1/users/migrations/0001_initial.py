# Generated by Django 4.1.8 on 2025-02-13 07:50

import apps.users.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='crate time', null=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, help_text='update time', null=True, verbose_name='更新时间')),
                ('delete_time', models.DateTimeField(blank=True, help_text='delete time', null=True, verbose_name='删除时间')),
                ('username', models.CharField(db_index=True, help_text='用户名', max_length=255, unique=True, verbose_name='用户名')),
                ('nickname', models.CharField(blank=True, help_text='昵称', max_length=255, null=True, verbose_name='昵称')),
                ('name', models.CharField(blank=True, help_text='姓名', max_length=255, null=True, verbose_name='姓名')),
                ('email', models.EmailField(blank=True, help_text='邮箱', max_length=150, null=True, verbose_name='邮箱')),
                ('phone', models.CharField(blank=True, help_text='手机号', max_length=32, null=True, verbose_name='手机号')),
                ('tel', models.CharField(blank=True, help_text='座机电话', max_length=64, null=True, verbose_name='座机电话')),
                ('avatar', models.ImageField(blank=True, help_text='头像', null=True, upload_to='avatar', verbose_name='头像')),
                ('birthday', models.DateField(blank=True, help_text='生日', null=True, verbose_name='生日')),
                ('gender', models.IntegerField(blank=True, choices=[(0, '未知'), (1, '男'), (2, '女')], default=0, help_text='性别', null=True, verbose_name='性别')),
                ('user_type', models.IntegerField(blank=True, choices=[(0, '未知'), (1, '超级管理员'), (2, '系统管理员'), (3, '普通用户')], default=0, help_text='用户类型', null=True, verbose_name='用户类型')),
                ('login_error_count', models.IntegerField(default=0, help_text='登录错误次数', verbose_name='登录错误次数')),
                ('pwd_change_count', models.IntegerField(blank=True, default=0, help_text='密码修改次数', verbose_name='密码修改次数')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户表',
                'verbose_name_plural': '用户表',
                'db_table': 'rj_users',
                'ordering': ['-id', '-create_time'],
            },
            managers=[
                ('objects', apps.users.models.MyUserManager()),
            ],
        ),
    ]
